.ssh_setup:
  before_script:
    - sudo mkdir -p ~/.ssh
    - echo "$THE_WAY" | base64 --decode | sudo tee ~/.ssh/the_way > /dev/null
    - sudo chmod 600 ~/.ssh/the_way

stages:
 - setup_cluster
 - validate_cluster
 - restore_cluster
 - terraform_apply
 - Make_Proxmox_K8S

variables:
  SETUP_ATTEMPTS: 0
  MAX_SETUP_ATTEMPTS: 2

# Trigger child pipeline for cluster setup
setup_cluster:
  stage: setup_cluster
  trigger:
    include: setup-cluster.yml
    strategy: depend
  variables:
    THE_WAY: $THE_WAY
    TEST_TARGET: $TEST_TARGET
    OPENAI_API_KEY: $OPENAI_API_KEY

validate_cluster:
  extends: .ssh_setup
  image: docker.ellisbs.co.uk:5190/ubuntu:24.04
  stage: validate_cluster
  tags:
    - linux
  timeout: 1h
  script:
    - cat config.json
    - sudo scp -o StrictHostKeyChecking=no -i ~/.ssh/the_way -T validate_cluster.rb config.json run_validation.sh $TEST_TARGET:Documents/src/test/
    - sudo ssh -o StrictHostKeyChecking=no -i ~/.ssh/the_way -T $TEST_TARGET "cd Documents/src/test && chmod +x run_validation.sh && ./run_validation.sh"
    - sudo scp -o StrictHostKeyChecking=no -i ~/.ssh/the_way -T $TEST_TARGET:Documents/src/test/validate_cluster.log validate_cluster.log || echo "Could not copy validation log - may not exist"
    - cat validate_cluster.log
    - echo $SETUP_ATTEMPTS > setup_attempts.txt
    - if grep -q "Kubernetes cluster validation passed successfully!" validate_cluster.log; then echo "Validation passed!"; else echo "Validation failed!"; CURRENT_ATTEMPTS=$(cat setup_attempts.txt); if [ $CURRENT_ATTEMPTS -lt $MAX_SETUP_ATTEMPTS ]; then NEW_ATTEMPTS=$((CURRENT_ATTEMPTS+1)); echo "Will retry for attempt $NEW_ATTEMPTS"; exit 1; else echo "Max attempts reached"; exit 1; fi; fi
  artifacts:
    paths:
      - validate_cluster.log
      - setup_attempts.txt
  retry:
    max: 2
    when:
      - script_failure
      - runner_system_failure

restore_cluster:
  extends: .ssh_setup
  retry:
    max: 2
    when:
      - script_failure
      - api_failure
  image: docker.ellisbs.co.uk:5190/ubuntu:24.04
  stage: restore_cluster
  tags:
    - linux
  timeout: 1h
  script:
    - sudo scp -o StrictHostKeyChecking=no -i ~/.ssh/the_way -T Backup_Restore.sh config.json $TEST_TARGET:Documents/src/test/
    - sudo apt-get update && sudo apt-get install -y jq
    - export NODE_NAME="$(jq -r '.node_name' config.json)1"
    - sudo ssh -o StrictHostKeyChecking=no -i ~/.ssh/the_way -T $TEST_TARGET "cd Documents/src/test/ && vagrant ssh -c 'ssh -o StrictHostKeyChecking=no pm2  mkdir -p /home/vagrant/k8s_postgres/postgresql-data' $NODE_NAME"
    - sudo ssh -o StrictHostKeyChecking=no -i ~/.ssh/the_way -T $TEST_TARGET "cd Documents/src/test/ && chmod +x Backup_Restore.sh && vagrant ssh -c 'cd /vagrant && ./Backup_Restore.sh' $NODE_NAME"
  dependencies:
    - validate_cluster
  allow_failure: true

terraform_apply:
  retry:
    max: 2
    when:
      - script_failure
      - api_failure
  image: docker.ellisbs.co.uk:5190/ubuntu:24.04
  stage: terraform_apply
  tags:
    - linux
  timeout: 1h
  script:
    - if ! curl -f http://$NODE1:8006 > /dev/null 2>&1; then echo "Sorry proxmox not available"; exit 0; fi
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata docker-compose
    - cd terraform
    - echo "MY_PROJECT_TOKEN=${MY_PROJECT_TOKEN}" >> .env
    - echo "CI_JOB_TOKEN=${CI_JOB_TOKEN}" >> .env
    - echo "CI_SERVER_HOST=${CI_SERVER_HOST}" >> .env
    - echo "CI_PROJECT_PATH=${CI_PROJECT_PATH}" >> .env
    - echo "CI_COMMIT_SHA=${CI_COMMIT_SHA}" >> .env
    - docker-compose up -d
    - docker-compose exec -T opentofu sh -c "cd /opt/pwd && rm -rf vagrant_kubernetes && export CI_JOB_TOKEN=${MY_PROJECT_TOKEN} && export CI_SERVER_HOST=gitlab.ellisbs.co.uk && export CI_PROJECT_PATH=ian/vagrant_kubernetes && export CI_COMMIT_SHA=${CI_COMMIT_SHA} && git config --global http.sslVerify false && git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ellisbs.co.uk/${CI_PROJECT_PATH}.git && cd vagrant_kubernetes && git checkout ${CI_COMMIT_SHA} && cd terraform && tofu init && tofu validate && tofu apply --auto-approve"

Make_Proxmox_K8S:
  retry:
    max: 2
    when:
      - script_failure
      - api_failure
  image: docker.ellisbs.co.uk:5190/ubuntu:24.04
  stage: Make_Proxmox_K8S
  tags:
    - linux
  timeout: 1h
  script:
    - if ! curl -f http://$NODE1:8006 > /dev/null 2>&1; then echo "Sorry proxmox not available"; exit 0; fi
    - apt-get update
    - apt-get install -y jq
    - ./make_proxmox_k8s.sh
